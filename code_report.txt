# RIDE SHARING APPLICATION - CODE REPORT

## 1. OVERVIEW
This is a ride-sharing application designed for University of Roehampton students and staff. The application allows users to offer rides, request rides, and manage ride requests. It is built using Node.js with Express.js framework and uses a MySQL database for data storage.

## 2. APPLICATION ARCHITECTURE

### 2.1 Technology Stack
- **Backend**: Node.js with Express.js
- **Database**: MySQL
- **View Engine**: Pug (formerly Jade)
- **Authentication**: Session-based authentication
- **File Upload**: Multer for handling profile photo uploads
- **Containerization**: Docker with docker-compose

### 2.2 Directory Structure
- **app/**: Main application code
  - **controllers/**: Request handlers
  - **models/**: Data models and database interactions
  - **routes/**: Route definitions
  - **middleware/**: Custom middleware (authentication, etc.)
  - **services/**: Service layer (database connection, etc.)
  - **views/**: Pug templates
- **static/**: Static assets (CSS, images)
- **db/**: Database scripts and migrations
- **public/**: Public assets

## 3. DATABASE SCHEMA

### 3.1 Users Table
- Stores user information (students and staff)
- Fields: id, name, email, password, profile_photo, created_at
- Email domain restricted to @roehampton.ac.uk

### 3.2 Rides Table
- Stores ride offerings
- Fields: id, driver_id, departure_time, pickup_location, seats_available, tags, created_at
- Foreign key to Users table (driver_id)

### 3.3 Ride_Requests Table
- Stores ride requests from passengers
- Fields: id, ride_id, passenger_id, status, requested_at
- Foreign keys to Users and Rides tables
- Status can be 'pending', 'accepted', or 'rejected'

## 4. CORE FUNCTIONALITY

### 4.1 User Management
- User registration with email validation
- User authentication (login/logout)
- Profile management (view/edit profile)
- Profile photo upload and management

### 4.2 Ride Management
- List available rides with search and filtering
- Offer new rides
- View ride details
- Request to join rides
- Accept/reject ride requests
- Tag-based categorization of rides

### 4.3 Security Features
- Password hashing using SHA-256
- Session-based authentication
- Protected routes for authenticated users
- Email domain validation

## 5. CONTROLLERS

### 5.1 UserController
- Handles user registration, login, and profile management
- Manages profile photo uploads
- Provides user listing and profile viewing

### 5.2 RideController
- Manages ride listings and details
- Handles ride creation and requests
- Processes ride request acceptance/rejection
- Provides tag-based filtering

## 6. MODELS

### 6.1 UserModel
- Manages user data operations
- Handles user authentication
- Provides methods for user CRUD operations
- Manages profile photo updates

### 6.2 RideModel
- Manages ride data operations
- Handles ride requests
- Provides methods for ride CRUD operations
- Manages tag-based filtering

## 7. ROUTES

### 7.1 User Routes
- Public routes: signup, login, logout
- Protected routes: profile view/edit, photo upload
- Diagnostic routes for troubleshooting

### 7.2 Ride Routes
- Ride listing and search
- Ride creation and management
- Ride request handling
- Tag-based filtering

## 8. MIDDLEWARE
- Authentication middleware for protected routes
- Session management
- Static file serving
- Error handling

## 9. DEPLOYMENT
- Docker containerization
- Environment variable configuration
- Database initialization scripts

## 10. TESTING AND DIAGNOSTICS
- Database connection testing
- Table accessibility diagnostics
- Profile photo validation
- Join query testing

## 11. FUTURE IMPROVEMENTS
- Implement real-time notifications
- Add payment integration
- Enhance search functionality
- Improve mobile responsiveness
- Add rating and review system 