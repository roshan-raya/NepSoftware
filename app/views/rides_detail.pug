extends layout

block content
  style.
    .badge {
      transition: all 0.2s ease;
    }
    
    a .badge:hover, 
    a.badge:hover {
      background-color: #6c757d !important;
      color: white !important;
      transform: translateY(-2px);
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    
    .list-group-item a {
      display: inline-block;
    }
    
    .list-group-item a .badge {
      padding: 0.5rem 0.75rem;
      border-radius: 20px;
    }

  if ride
    .container.py-4
      .row
        .col-md-8
          // Ride Details Card
          .card.shadow-sm.mb-4
            .card-header.bg-white.py-3
              .d-flex.justify-content-between.align-items-center
                h2.mb-0.text-primary
                  i.fas.fa-car.me-2
                  | Ride Details
                span.badge.bg-primary.fs-6
                  i.fas.fa-clock.me-1
                  | #{new Date(ride.departure_time).toLocaleString()}
            .card-body
              .row.g-4
                // Location Information
                .col-md-6
                  .location-info.mb-4
                    h4.mb-3
                      i.fas.fa-map-marker-alt.text-danger.me-2
                      | Pickup Location
                    p.fs-5.mb-4 #{ride.pickup_location}
                    
                    h4.mb-3
                      i.fas.fa-flag-checkered.text-success.me-2
                      | Destination
                    p.fs-5 #{ride.destination}
                
                // Ride Information
                .col-md-6
                  .ride-info.mb-4
                    h4.mb-3
                      i.fas.fa-info-circle.text-primary.me-2
                      | Ride Information
                    .d-flex.align-items-center.mb-2
                      i.fas.fa-clock.text-primary.me-2
                      p.mb-0 Departure: #{new Date(ride.departure_time).toLocaleTimeString()}
                    .d-flex.align-items-center.mb-2
                      i.fas.fa-chair.text-success.me-2
                      p.mb-0 Available Seats: #{ride.seats_available}
                    
                    .d-flex.align-items-center.mb-2
                      i.fas.fa-folder.text-info.me-2
                      p.mb-0 Category: 
                        a(href=`/rides?category=${encodeURIComponent(ride.category || 'Campus Routes')}`) #{ride.category || 'Campus Routes'}
                    
                    .d-flex.align-items-center.mb-2
                      i.fas.fa-info-circle.me-2
                      p.mb-0 Status: 
                        span.badge(class=ride.status === 'Available' ? 'bg-success' : (ride.status === 'Full' ? 'bg-warning' : 'bg-secondary'))
                          | #{ride.status || 'Available'}
                    
                    if ride.preferences
                      h5.mt-3.mb-2
                        i.fas.fa-star.text-warning.me-2
                        | Ride Preferences
                      ul.list-group.list-group-flush.mb-2
                        each pref in (ride.preferences || '').split(',')
                          if pref.trim()
                            li.list-group-item.py-1.bg-transparent.border-0.d-flex.align-items-center
                              i.fas.fa-check-circle.text-success.me-2
                              a.text-decoration-none(href=`/rides?preferences=${encodeURIComponent(pref.trim())}`)
                                span.badge.bg-light.text-dark= pref.trim()
                    
                    if ride.tags
                      h5.mt-3.mb-2
                        i.fas.fa-tag.text-secondary.me-2
                        | Tags
                      .d-flex.flex-wrap.gap-1
                        each tag in (ride.tags || '').split(',')
                          if tag.trim()
                            a.badge.bg-light.text-dark.text-decoration-none(href=`/rides?tag=${encodeURIComponent(tag.trim())}`)
                              i.fas.fa-tag.me-1
                              | #{tag.trim()}
                
                // Map view if coordinates are available
                if ride.pickup_lat && ride.pickup_lng && ride.destination_lat && ride.destination_lng
                  .col-12.mt-4
                    .card.shadow-sm.mb-4
                      .card-header.bg-white.py-3
                        h4.mb-0.text-primary
                          i.fas.fa-map-marked-alt.me-2
                          | Route Map
                      .card-body.p-0
                        #map-container(style='height: 300px; width: 100%')
                        input#pickup-lat(type='hidden', value=ride.pickup_lat)
                        input#pickup-lng(type='hidden', value=ride.pickup_lng)
                        input#dest-lat(type='hidden', value=ride.destination_lat)
                        input#dest-lng(type='hidden', value=ride.destination_lng)
                else 
                  .col-12.mt-4
                    .card.shadow-sm.mb-4
                      .card-header.bg-white.py-3
                        h4.mb-0.text-primary
                          i.fas.fa-map-marked-alt.me-2
                          | Route Map
                      .card-body.text-center.py-4
                        i.fas.fa-map.text-muted.fa-3x.mb-3
                        h5.text-muted Route Information
                        p.text-muted Map view is not available for this ride.
                        if userId && ride.driver_id == userId
                          p.text-info
                            i.fas.fa-info-circle.me-1
                            | As the driver, you can update this ride with location coordinates to enable the map display.
                          a.btn.btn-outline-primary.mt-2(href=`/rides/edit/${ride.id}`)
                            i.fas.fa-edit.me-1
                            | Update Ride Details
                        else
                          p.text-muted.small The driver has not added location coordinates for this ride.
              
              hr.my-4
              
              // Driver Information
              .driver-info
                h4.mb-3
                  i.fas.fa-user.text-primary.me-2
                  | About the Driver
                .d-flex.align-items-center
                  img.rounded-circle.me-3(src=getProfilePhoto(ride.profile_photo) alt=`${ride.driver_name}'s profile photo` width='60' height='60')
                  .driver-details
                    h5.mb-1 #{ride.driver_name}
                    .d-flex.mt-2
                      a.btn.btn-outline-primary.btn-sm.me-2(href=`/users/${ride.driver_id}`)
                        i.fas.fa-user-circle.me-1
                        | View Profile
                      
                      //- Add review button for completed rides (for passengers only)
                      if ride.status === 'Completed' && userId && userId !== ride.driver_id
                        a.btn.btn-outline-success.btn-sm(href=`/reviews/create/${ride.id}/${ride.driver_id}/driver`)
                          i.fas.fa-star.me-1
                          | Review Driver
                
                // Driver Reviews Section
                if driverReviews
                  .driver-reviews.mt-4
                    include user_reviews.pug
                    .text-end.mt-2
                      a.btn.btn-outline-primary.btn-sm(href=`/reviews/user/${ride.driver_id}?type=driver`)
                        i.fas.fa-external-link-alt.me-1
                        | See All Reviews
        
        // Request to Join Card
        .col-lg-4
          .card.shadow-sm.mb-4
            .card-header.bg-white.py-3
              h3.mb-0
                i.fas.fa-handshake.me-2.text-primary
                if userId && ride.driver_id == userId
                  | Respond to Requests
                else
                  | Request to Join
            .card-body
              if userId && ride.driver_id == userId
                // Driver view - show a message about responding to requests
                .alert.alert-info
                  i.fas.fa-info-circle.me-2
                  | As the driver, you can accept or reject ride requests below.
                if requests && requests.length > 0
                  .list-group.mb-3
                    each request in requests
                      if request.status === 'pending'
                        .list-group-item
                          .d-flex.justify-content-between.align-items-start
                            .d-flex.align-items-start
                              img.rounded-circle.me-3(src=getProfilePhoto(request.profile_photo) alt=`${request.passenger_name}'s profile photo` width='50' height='50')
                              .d-flex.flex-column
                                h6.mb-1 #{request.passenger_name}
                                small.text-muted.mb-2
                                  i.far.fa-clock.me-1
                                  | #{new Date(request.requested_at).toLocaleString()}
                                if request.message
                                  .message-box.bg-light.p-2.rounded.mb-2
                                    small.text-muted
                                      i.fas.fa-comment-alt.me-1
                                      | Message:
                                    p.mb-0.small #{request.message}
                                    
                                    // Display driver's reply if it exists
                                    if request.driver_reply
                                      .message-box.bg-info.bg-opacity-10.p-2.rounded.mt-2
                                        small.text-muted
                                          i.fas.fa-reply.me-1
                                          | Driver's Reply:
                                        p.mb-0.small #{request.driver_reply}
                                    
                                    // Reply form for drivers
                                    if request.status === 'accepted' && ride.driver_id == userId
                                      form.mt-2(action=`/rides/${ride.id}/requests/${request.id}/reply` method='POST')
                                        .input-group
                                          input.form-control.form-control-sm(
                                            type='text'
                                            name='reply'
                                            placeholder='Type your reply...'
                                          )
                                          button.btn.btn-sm.btn-outline-primary(type='submit')
                                            i.fas.fa-reply.me-1
                                            | Reply
                            .btn-group
                              form.me-2(action=`/rides/${ride.id}/requests/${request.id}/accept` method='POST')
                                button.btn.btn-success.btn-sm(type='submit')
                                  i.fas.fa-check.me-1
                                  | Accept
                              form(action=`/rides/${ride.id}/requests/${request.id}/reject` method='POST')
                                button.btn.btn-danger.btn-sm(type='submit')
                                  i.fas.fa-times.me-1
                                  | Reject
                else
                  .alert.alert-warning
                    i.fas.fa-info-circle.me-2
                    | No pending requests for this ride.
              else if ride.status === 'Available' && ride.seats_available > 0
                if userId
                  form(action=`/rides/${ride.id}/request` method='POST')
                    .mb-3
                      label.form-label(for='message')
                        i.fas.fa-comment-alt.me-2
                        | Message to Driver
                      textarea.form-control(
                        id='message'
                        name='message'
                        rows='4'
                        placeholder='Introduce yourself and explain why you want to join this ride'
                      )
                    button.btn.btn-primary.w-100(type='submit')
                      i.fas.fa-paper-plane.me-2
                      | Send Request
                else
                  .card.border-info
                    .card-body.text-center
                      p.card-text
                        i.fas.fa-info-circle.me-2
                        | You need to be logged in to request a ride.
                      button.btn.btn-primary.auth-required(data-action='request' data-ride-id=ride.id)
                        i.fas.fa-sign-in-alt.me-2
                        | Login to Request
              else
                .alert.alert-warning.d-flex.align-items-center
                  i.fas.fa-exclamation-triangle.me-2
                  if ride.status === 'Full' || ride.seats_available <= 0
                    | No seats available for this ride.
                  else if ride.status === 'Completed'
                    | This ride has been completed.
                  else
                    | This ride is no longer available.
          
          // Ride Management Card (for driver)
          if userId && ride.driver_id == userId
            .card.shadow-sm.mb-4
              .card-header.bg-white.py-3
                h3.mb-0
                  i.fas.fa-cogs.me-2.text-primary
                  | Manage Ride
              .card-body
                h5.mb-3 Update Status
                form(action=`/rides/${ride.id}/status` method='POST')
                  .mb-3
                    select.form-control(name='status')
                      option(value='Available', selected=ride.status === 'Available') Available
                      option(value='Full', selected=ride.status === 'Full') Full
                      option(value='Completed', selected=ride.status === 'Completed') Completed
                  button.btn.btn-primary.mb-3.w-100(type='submit')
                    i.fas.fa-sync.me-1
                    | Update Status
                
                form(action=`/rides/${ride.id}/delete` method='POST')
                  button.btn.btn-danger.w-100(type='submit', onclick="return confirm('Are you sure you want to delete this ride? This action cannot be undone.')")
                    i.fas.fa-trash.me-1
                    | Delete Ride
      
      // Ride Requests Section
      if requests && requests.length > 0
        .card.shadow-sm
          .card-header.bg-white.py-3
            h3.mb-0
              i.fas.fa-users.me-2.text-primary
              | Ride Requests
          .card-body.p-0
            .list-group.list-group-flush
              each request in requests
                .list-group-item
                  .d-flex.justify-content-between.align-items-start
                    .d-flex.align-items-start
                      img.rounded-circle.me-3(src=getProfilePhoto(request.profile_photo) alt=`${request.passenger_name}'s profile photo` width='50' height='50')
                      .d-flex.flex-column
                        h6.mb-1 #{request.passenger_name}
                        small.text-muted.mb-2
                          i.far.fa-clock.me-1
                          | #{new Date(request.requested_at).toLocaleString()}
                        if request.message
                          .message-box.bg-light.p-2.rounded.mb-2
                            small.text-muted
                              i.fas.fa-comment-alt.me-1
                              | Message:
                            p.mb-0.small #{request.message}
                            
                            // Display driver's reply if it exists
                            if request.driver_reply
                              .message-box.bg-info.bg-opacity-10.p-2.rounded.mt-2
                                small.text-muted
                                  i.fas.fa-reply.me-1
                                  | Driver's Reply:
                                p.mb-0.small #{request.driver_reply}
                            
                            // Reply form for drivers
                            if request.status === 'accepted' && ride.driver_id == userId
                              form.mt-2(action=`/rides/${ride.id}/requests/${request.id}/reply` method='POST')
                                .input-group
                                  input.form-control.form-control-sm(
                                    type='text'
                                    name='reply'
                                    placeholder='Type your reply...'
                                  )
                                  button.btn.btn-sm.btn-outline-primary(type='submit')
                                    i.fas.fa-reply.me-1
                                    | Reply
                    if request.status === 'pending'
                      if ride.driver_id == userId
                        .btn-group
                          form.me-2(action=`/rides/${ride.id}/requests/${request.id}/accept` method='POST')
                            button.btn.btn-success.btn-sm(type='submit')
                              i.fas.fa-check.me-1
                              | Accept
                          form(action=`/rides/${ride.id}/requests/${request.id}/reject` method='POST')
                            button.btn.btn-danger.btn-sm(type='submit')
                              i.fas.fa-times.me-1
                              | Reject
                      else
                        span.badge.bg-warning
                          i.fas.fa-clock.me-1
                          | Pending
                    else
                      span.badge(class=request.status === 'accepted' ? 'bg-success' : 'bg-danger')
                        i.fas(class=request.status === 'accepted' ? 'fa-check' : 'fa-times').me-1
                        | #{request.status.charAt(0).toUpperCase() + request.status.slice(1)}
  else
    .container.py-4
      .alert.alert-warning.d-flex.align-items-center
        i.fas.fa-exclamation-circle.me-2
        h4.mb-0 Ride Not Found
        p.mb-0.ms-2 The ride you're looking for doesn't exist or has been removed. 

block scripts
  script.
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize map if coordinates are available
      const pickupLat = document.getElementById('pickup-lat')?.value;
      const pickupLng = document.getElementById('pickup-lng')?.value;
      const destLat = document.getElementById('dest-lat')?.value;
      const destLng = document.getElementById('dest-lng')?.value;
      
      if (pickupLat && pickupLng && destLat && destLng) {
        // Convert coordinates to numbers
        const pickupLatNum = parseFloat(pickupLat);
        const pickupLngNum = parseFloat(pickupLng);
        const destLatNum = parseFloat(destLat);
        const destLngNum = parseFloat(destLng);
        
        // Initialize map
        const mapContainer = document.getElementById('map-container');
        if (mapContainer) {
          // Create the map
          const map = L.map('map-container').setView([pickupLatNum, pickupLngNum], 13);
          
          // Add the OpenStreetMap layer
          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          }).addTo(map);
          
          // Add markers for pickup and destination
          const pickupMarker = L.marker([pickupLatNum, pickupLngNum], {
            title: 'Pickup Location',
            icon: L.icon({
              iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
              shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
              iconSize: [25, 41],
              iconAnchor: [12, 41],
              shadowSize: [41, 41]
            })
          }).addTo(map);
          
          const destMarker = L.marker([destLatNum, destLngNum], {
            title: 'Destination',
            icon: L.icon({
              iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
              shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
              iconSize: [25, 41],
              iconAnchor: [12, 41],
              shadowSize: [41, 41]
            })
          }).addTo(map);
          
          // Add a polyline between the points
          const routeLine = L.polyline([
            [pickupLatNum, pickupLngNum],
            [destLatNum, destLngNum]
          ], {
            color: 'blue',
            weight: 5,
            opacity: 0.7,
            dashArray: '10, 10',
            lineJoin: 'round'
          }).addTo(map);
          
          // Add popups with location info
          pickupMarker.bindPopup(`<b>Pickup Location:</b><br>${ride.pickup_location}`);
          destMarker.bindPopup(`<b>Destination:</b><br>${ride.destination}`);
          
          // Fit the map to show both points
          const bounds = L.latLngBounds([
            [pickupLatNum, pickupLngNum],
            [destLatNum, destLngNum]
          ]);
          map.fitBounds(bounds, { padding: [50, 50] });
          
          // Try to get a route using OSRM public API
          try {
            fetch(`https://router.project-osrm.org/route/v1/driving/${pickupLngNum},${pickupLatNum};${destLngNum},${destLatNum}?overview=full&geometries=geojson`)
              .then(response => response.json())
              .then(data => {
                if (data.routes && data.routes.length > 0) {
                  // Remove the straight line
                  map.removeLayer(routeLine);
                  
                  // Add the actual route
                  const routeCoordinates = data.routes[0].geometry.coordinates;
                  const latLngs = routeCoordinates.map(coord => [coord[1], coord[0]]);
                  
                  L.polyline(latLngs, {
                    color: 'blue',
                    weight: 5,
                    opacity: 0.7,
                    lineJoin: 'round'
                  }).addTo(map);
                }
              })
              .catch(error => {
                console.error('Error fetching route:', error);
                // The straight line will remain if there's an error
              });
          } catch (error) {
            console.error('Error with route calculation:', error);
          }
        }
      }
    }); 