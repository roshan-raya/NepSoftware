extends layout

block content
  .container
    h1.mb-4 Edit Ride
    
    if error
      .alert.alert-danger #{error}
    
    .card
      .card-body
        form(action=`/rides/edit/${ride.id}`, method='POST')
          .mb-3
            label.form-label(for='pickupLocation') Pickup Location*
            .input-group.mb-2
              input.form-control#pickupLocation(
                type='text', 
                name='pickupLocation', 
                placeholder='e.g., Putney Station', 
                required,
                value=ride.pickup_location
              )
              button.btn.btn-outline-secondary.show-pickup-map-btn(type='button')
                i.fas.fa-map-marker-alt
              if ride.pickup_lat && ride.pickup_lng
                span.input-group-text.bg-success.text-white.coordinate-status(title='Coordinates available')
                  i.fas.fa-check
              else
                span.input-group-text.bg-warning.text-white.coordinate-status(title='No coordinates - map display requires coordinates')
                  i.fas.fa-exclamation-triangle
            #pickup-map-container(style=`height: 250px; display: ${ride.pickup_lat && ride.pickup_lng ? 'block' : 'none'}; margin-bottom: 10px;`)
            input(type='hidden', name='pickupLat', id='pickupLat', value=ride.pickup_lat)
            input(type='hidden', name='pickupLng', id='pickupLng', value=ride.pickup_lng)
          
          .mb-3
            label.form-label(for='dropoffLocation') Destination*
            .input-group.mb-2
              input.form-control#dropoffLocation(
                type='text', 
                name='dropoffLocation', 
                placeholder='e.g., Roehampton University', 
                required,
                value=ride.destination
              )
              button.btn.btn-outline-secondary.show-dropoff-map-btn(type='button')
                i.fas.fa-map-marker-alt
              if ride.destination_lat && ride.destination_lng
                span.input-group-text.bg-success.text-white.coordinate-status(title='Coordinates available')
                  i.fas.fa-check
              else
                span.input-group-text.bg-warning.text-white.coordinate-status(title='No coordinates - map display requires coordinates')
                  i.fas.fa-exclamation-triangle
            #dropoff-map-container(style=`height: 250px; display: ${ride.destination_lat && ride.destination_lng ? 'block' : 'none'}; margin-bottom: 10px;`)
            input(type='hidden', name='dropoffLat', id='dropoffLat', value=ride.destination_lat)
            input(type='hidden', name='dropoffLng', id='dropoffLng', value=ride.destination_lng)
          
          - const departureDate = new Date(ride.departure_time).toISOString().slice(0, 16);
          .mb-3
            label.form-label(for='departureDatetime') Departure Date and Time*
            input.form-control#departureDatetime(
              type='datetime-local', 
              name='departureDatetime', 
              required,
              value=departureDate
            )
          
          .mb-3
            label.form-label(for='seatsAvailable') Available Seats*
            input.form-control#seatsAvailable(
              type='number', 
              name='seatsAvailable', 
              min='1', 
              max='8', 
              required,
              value=ride.seats_available
            )
          
          .mb-3
            label.form-label(for='category') Ride Category*
            select.form-control#category(name='category', required)
              option(value='Campus Routes', selected=ride.category === 'Campus Routes') Campus Routes
              option(value='Shopping Trips', selected=ride.category === 'Shopping Trips') Shopping Trips
              option(value='Airport Transfers', selected=ride.category === 'Airport Transfers') Airport Transfers
              option(value='Special Events', selected=ride.category === 'Special Events') Special Events
              option(value='Weekend Getaways', selected=ride.category === 'Weekend Getaways') Weekend Getaways
            small.form-text.text-muted Select the category that best describes your ride.
          
          - const preferences = ride.preferences ? ride.preferences.split(',').map(p => p.trim()) : [];
          .mb-3
            label.form-label Ride Preferences
            .form-check
              input.form-check-input#quietRide(type='checkbox', name='preferences', value='Quiet Ride', checked=preferences.includes('Quiet Ride'))
              label.form-check-label(for='quietRide') Quiet Ride
            .form-check
              input.form-check-input#musicAllowed(type='checkbox', name='preferences', value='Music Allowed', checked=preferences.includes('Music Allowed'))
              label.form-check-label(for='musicAllowed') Music Allowed
            .form-check
              input.form-check-input#petFriendly(type='checkbox', name='preferences', value='Pet Friendly', checked=preferences.includes('Pet Friendly'))
              label.form-check-label(for='petFriendly') Pet Friendly
            .form-check
              input.form-check-input#smokingAllowed(type='checkbox', name='preferences', value='Smoking Allowed', checked=preferences.includes('Smoking Allowed'))
              label.form-check-label(for='smokingAllowed') Smoking Allowed
            .form-check
              input.form-check-input#longTermParking(type='checkbox', name='preferences', value='Long-Term Parking Available', checked=preferences.includes('Long-Term Parking Available'))
              label.form-check-label(for='longTermParking') Long-Term Parking Available
            small.form-text.text-muted Select all that apply to your ride.
          
          .mb-3
            label.form-label(for='tags') Tags (comma separated)
            input.form-control#tags(
              type='text', 
              name='tags', 
              placeholder='e.g., Morning, Putney, Commute', 
              value=ride.tags
            )
            small.form-text.text-muted Tags help others find your ride - separate multiple tags with commas.
          
          if tags && tags.length > 0
            .mb-3
              label.form-label Popular Tags
              .d-flex.flex-wrap.gap-2
                each tag in tags
                  button.btn.btn-sm.btn-outline-secondary.tag-btn(type='button', data-tag=tag.name) #{tag.name}

          .alert.alert-info.mb-3
            i.fas.fa-info-circle.me-2
            | Adding location coordinates enables the route map display for your ride.
          
          .d-grid.gap-2.d-md-flex.justify-content-md-end
            a.btn.btn-secondary.me-md-2(href=`/rides/${ride.id}`) Cancel
            button.btn.btn-primary(type='submit') Update Ride

block scripts
  script.
    // When document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Leaflet Maps Setup
      let pickupMap, dropoffMap;
      let pickupMarker, dropoffMarker;
      const defaultLocation = [51.4613, -0.2227]; // Roehampton University coordinates
      
      // Get existing coordinates if available
      const pickupLat = document.getElementById('pickupLat').value;
      const pickupLng = document.getElementById('pickupLng').value;
      const dropoffLat = document.getElementById('dropoffLat').value;
      const dropoffLng = document.getElementById('dropoffLng').value;
      
      // Set initial pickup location
      const initialPickupLocation = pickupLat && pickupLng ? 
        [parseFloat(pickupLat), parseFloat(pickupLng)] : defaultLocation;
        
      // Set initial dropoff location
      const initialDropoffLocation = dropoffLat && dropoffLng ? 
        [parseFloat(dropoffLat), parseFloat(dropoffLng)] : defaultLocation;
      
      // Function to update coordinate status indicators
      function updateCoordinateStatus() {
        const pickupCoordinates = document.getElementById('pickupLat').value && document.getElementById('pickupLng').value;
        const dropoffCoordinates = document.getElementById('dropoffLat').value && document.getElementById('dropoffLng').value;
        
        // Update pickup indicator
        const pickupIndicator = document.querySelector('.input-group:has(#pickupLocation) .coordinate-status');
        if (pickupIndicator) {
          if (pickupCoordinates) {
            pickupIndicator.className = 'input-group-text bg-success text-white coordinate-status';
            pickupIndicator.title = 'Coordinates available';
            pickupIndicator.innerHTML = '<i class="fas fa-check"></i>';
          } else {
            pickupIndicator.className = 'input-group-text bg-warning text-white coordinate-status';
            pickupIndicator.title = 'No coordinates - map display requires coordinates';
            pickupIndicator.innerHTML = '<i class="fas fa-exclamation-triangle"></i>';
          }
        }
        
        // Update dropoff indicator
        const dropoffIndicator = document.querySelector('.input-group:has(#dropoffLocation) .coordinate-status');
        if (dropoffIndicator) {
          if (dropoffCoordinates) {
            dropoffIndicator.className = 'input-group-text bg-success text-white coordinate-status';
            dropoffIndicator.title = 'Coordinates available';
            dropoffIndicator.innerHTML = '<i class="fas fa-check"></i>';
          } else {
            dropoffIndicator.className = 'input-group-text bg-warning text-white coordinate-status';
            dropoffIndicator.title = 'No coordinates - map display requires coordinates';
            dropoffIndicator.innerHTML = '<i class="fas fa-exclamation-triangle"></i>';
          }
        }
      }
      
      // Set up event listeners to update coordinates status
      document.getElementById('pickupLat').addEventListener('change', updateCoordinateStatus);
      document.getElementById('pickupLng').addEventListener('change', updateCoordinateStatus);
      document.getElementById('dropoffLat').addEventListener('change', updateCoordinateStatus);
      document.getElementById('dropoffLng').addEventListener('change', updateCoordinateStatus);
      
      // Call updateCoordinateStatus initially to set the correct status
      updateCoordinateStatus();
      
      // Initialize the maps automatically if coordinates are available
      if (pickupLat && pickupLng) {
        initializePickupMap();
      }
      
      if (dropoffLat && dropoffLng) {
        initializeDropoffMap();
      }

      // Listen for changes in the location fields
      document.getElementById('pickupLocation').addEventListener('input', function() {
        // If user manually changes the location text, show the map to allow coordinate selection
        if (!pickupMap) {
          document.querySelector('.show-pickup-map-btn').click();
        }
      });
      
      document.getElementById('dropoffLocation').addEventListener('input', function() {
        // If user manually changes the location text, show the map to allow coordinate selection
        if (!dropoffMap) {
          document.querySelector('.show-dropoff-map-btn').click();
        }
      });

      // Initialize the pickup map when the button is clicked
      document.querySelector('.show-pickup-map-btn').addEventListener('click', function() {
        const mapContainer = document.getElementById('pickup-map-container');
        
        if (mapContainer.style.display === 'none') {
          mapContainer.style.display = 'block';
          initializePickupMap();
        } else {
          mapContainer.style.display = 'none';
        }
      });
      
      // Initialize the dropoff map when the button is clicked
      document.querySelector('.show-dropoff-map-btn').addEventListener('click', function() {
        const mapContainer = document.getElementById('dropoff-map-container');
        
        if (mapContainer.style.display === 'none') {
          mapContainer.style.display = 'block';
          initializeDropoffMap();
        } else {
          mapContainer.style.display = 'none';
        }
      });
      
      // Function to initialize pickup map
      function initializePickupMap() {
        if (!pickupMap) {
          pickupMap = L.map('pickup-map-container').setView(initialPickupLocation, 13);
          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          }).addTo(pickupMap);
          
          // Add a marker at the initial location
          pickupMarker = L.marker(initialPickupLocation, {draggable: true}).addTo(pickupMap);
          
          // Update coordinates when marker is dragged
          pickupMarker.on('dragend', function(e) {
            const position = pickupMarker.getLatLng();
            document.getElementById('pickupLat').value = position.lat;
            document.getElementById('pickupLng').value = position.lng;
            
            // Reverse geocode to get the address
            const geocoder = L.Control.Geocoder.nominatim();
            geocoder.reverse(position, pickupMap.options.crs.scale(pickupMap.getZoom()), results => {
              if (results && results.length > 0) {
                document.getElementById('pickupLocation').value = results[0].name;
              }
            });
            
            // Update the coordinate status
            updateCoordinateStatus();
          });
          
          // Add geocoder control
          const pickupGeocoder = L.Control.geocoder({
            defaultMarkGeocode: false,
            placeholder: 'Search for location...',
            position: 'topleft'
          }).addTo(pickupMap);
          
          pickupGeocoder.on('markgeocode', function(e) {
            // Remove existing marker
            if (pickupMarker) {
              pickupMap.removeLayer(pickupMarker);
            }
            
            // Get the coordinates
            const latlng = e.geocode.center;
            
            // Add a new marker
            pickupMarker = L.marker(latlng, {draggable: true}).addTo(pickupMap);
            pickupMap.setView(latlng, 15);
            
            // Update form values
            document.getElementById('pickupLat').value = latlng.lat;
            document.getElementById('pickupLng').value = latlng.lng;
            document.getElementById('pickupLocation').value = e.geocode.name;
            
            // Update the coordinate status
            updateCoordinateStatus();
            
            // Update marker drag event
            pickupMarker.on('dragend', function(e) {
              const position = pickupMarker.getLatLng();
              document.getElementById('pickupLat').value = position.lat;
              document.getElementById('pickupLng').value = position.lng;
              
              // Reverse geocode to get the address
              const geocoder = L.Control.Geocoder.nominatim();
              geocoder.reverse(position, pickupMap.options.crs.scale(pickupMap.getZoom()), results => {
                if (results && results.length > 0) {
                  document.getElementById('pickupLocation').value = results[0].name;
                }
              });
              
              // Update the coordinate status
              updateCoordinateStatus();
            });
          });
          
          // Add a search by location name
          document.getElementById('pickupLocation').addEventListener('blur', function() {
            const locationText = this.value.trim();
            if (locationText && pickupMap) {
              // If there's no marker or coordinates have been cleared
              if (!document.getElementById('pickupLat').value || !document.getElementById('pickupLng').value) {
                // Search for the location
                const geocoder = L.Control.Geocoder.nominatim();
                geocoder.geocode(locationText, results => {
                  if (results && results.length > 0) {
                    const latlng = results[0].center;
                    
                    // Remove existing marker
                    if (pickupMarker) {
                      pickupMap.removeLayer(pickupMarker);
                    }
                    
                    // Add a new marker
                    pickupMarker = L.marker(latlng, {draggable: true}).addTo(pickupMap);
                    pickupMap.setView(latlng, 15);
                    
                    // Update form values
                    document.getElementById('pickupLat').value = latlng.lat;
                    document.getElementById('pickupLng').value = latlng.lng;
                    
                    // Update the coordinate status
                    updateCoordinateStatus();
                    
                    // Update marker drag event
                    pickupMarker.on('dragend', function(e) {
                      const position = pickupMarker.getLatLng();
                      document.getElementById('pickupLat').value = position.lat;
                      document.getElementById('pickupLng').value = position.lng;
                      
                      // Reverse geocode to get the address
                      geocoder.reverse(position, pickupMap.options.crs.scale(pickupMap.getZoom()), results => {
                        if (results && results.length > 0) {
                          document.getElementById('pickupLocation').value = results[0].name;
                        }
                      });
                      
                      // Update the coordinate status
                      updateCoordinateStatus();
                    });
                  }
                });
              }
            }
          });
        }
        
        // Fix map rendering issue by invalidating size
        setTimeout(() => {
          pickupMap.invalidateSize();
        }, 100);
      }
      
      // Function to initialize dropoff map
      function initializeDropoffMap() {
        if (!dropoffMap) {
          dropoffMap = L.map('dropoff-map-container').setView(initialDropoffLocation, 13);
          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          }).addTo(dropoffMap);
          
          // Add a marker at the initial location
          dropoffMarker = L.marker(initialDropoffLocation, {draggable: true}).addTo(dropoffMap);
          
          // Update coordinates when marker is dragged
          dropoffMarker.on('dragend', function(e) {
            const position = dropoffMarker.getLatLng();
            document.getElementById('dropoffLat').value = position.lat;
            document.getElementById('dropoffLng').value = position.lng;
            
            // Reverse geocode to get the address
            const geocoder = L.Control.Geocoder.nominatim();
            geocoder.reverse(position, dropoffMap.options.crs.scale(dropoffMap.getZoom()), results => {
              if (results && results.length > 0) {
                document.getElementById('dropoffLocation').value = results[0].name;
              }
            });
            
            // Update the coordinate status
            updateCoordinateStatus();
          });
          
          // Add geocoder control
          const dropoffGeocoder = L.Control.geocoder({
            defaultMarkGeocode: false,
            placeholder: 'Search for location...',
            position: 'topleft'
          }).addTo(dropoffMap);
          
          dropoffGeocoder.on('markgeocode', function(e) {
            // Remove existing marker
            if (dropoffMarker) {
              dropoffMap.removeLayer(dropoffMarker);
            }
            
            // Get the coordinates
            const latlng = e.geocode.center;
            
            // Add a new marker
            dropoffMarker = L.marker(latlng, {draggable: true}).addTo(dropoffMap);
            dropoffMap.setView(latlng, 15);
            
            // Update form values
            document.getElementById('dropoffLat').value = latlng.lat;
            document.getElementById('dropoffLng').value = latlng.lng;
            document.getElementById('dropoffLocation').value = e.geocode.name;
            
            // Update the coordinate status
            updateCoordinateStatus();
            
            // Update marker drag event
            dropoffMarker.on('dragend', function(e) {
              const position = dropoffMarker.getLatLng();
              document.getElementById('dropoffLat').value = position.lat;
              document.getElementById('dropoffLng').value = position.lng;
              
              // Reverse geocode to get the address
              const geocoder = L.Control.Geocoder.nominatim();
              geocoder.reverse(position, dropoffMap.options.crs.scale(dropoffMap.getZoom()), results => {
                if (results && results.length > 0) {
                  document.getElementById('dropoffLocation').value = results[0].name;
                }
              });
              
              // Update the coordinate status
              updateCoordinateStatus();
            });
          });
          
          // Add a search by location name
          document.getElementById('dropoffLocation').addEventListener('blur', function() {
            const locationText = this.value.trim();
            if (locationText && dropoffMap) {
              // If there's no marker or coordinates have been cleared
              if (!document.getElementById('dropoffLat').value || !document.getElementById('dropoffLng').value) {
                // Search for the location
                const geocoder = L.Control.Geocoder.nominatim();
                geocoder.geocode(locationText, results => {
                  if (results && results.length > 0) {
                    const latlng = results[0].center;
                    
                    // Remove existing marker
                    if (dropoffMarker) {
                      dropoffMap.removeLayer(dropoffMarker);
                    }
                    
                    // Add a new marker
                    dropoffMarker = L.marker(latlng, {draggable: true}).addTo(dropoffMap);
                    dropoffMap.setView(latlng, 15);
                    
                    // Update form values
                    document.getElementById('dropoffLat').value = latlng.lat;
                    document.getElementById('dropoffLng').value = latlng.lng;
                    
                    // Update the coordinate status
                    updateCoordinateStatus();
                    
                    // Update marker drag event
                    dropoffMarker.on('dragend', function(e) {
                      const position = dropoffMarker.getLatLng();
                      document.getElementById('dropoffLat').value = position.lat;
                      document.getElementById('dropoffLng').value = position.lng;
                      
                      // Reverse geocode to get the address
                      geocoder.reverse(position, dropoffMap.options.crs.scale(dropoffMap.getZoom()), results => {
                        if (results && results.length > 0) {
                          document.getElementById('dropoffLocation').value = results[0].name;
                        }
                      });
                      
                      // Update the coordinate status
                      updateCoordinateStatus();
                    });
                  }
                });
              }
            }
          });
        }
        
        // Fix map rendering issue by invalidating size
        setTimeout(() => {
          dropoffMap.invalidateSize();
        }, 100);
      }

      // Handle tag button clicks
      document.querySelectorAll('.tag-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const tagInput = document.getElementById('tags');
          const newTag = this.dataset.tag;
          
          if (tagInput.value.trim() === '') {
            tagInput.value = newTag;
          } else {
            const currentTags = tagInput.value.split(',').map(t => t.trim());
            if (!currentTags.includes(newTag)) {
              tagInput.value += `, ${newTag}`;
            }
          }
        });
      });
    }); 