extends layout

block content
  .container
    h1.mb-4 Offer a Ride
    
    if error
      .alert.alert-danger #{error}
    
    .card
      .card-body
        form(action='/rides/offer', method='POST')
          .mb-3
            label.form-label(for='pickupLocation') Pickup Location*
            input.form-control#pickupLocation(
              type='text', 
              name='pickupLocation', 
              placeholder='e.g., Putney Station', 
              required,
              value=formData ? formData.pickupLocation : ''
            )
          
          .mb-3
            label.form-label(for='dropoffLocation') Destination*
            input.form-control#dropoffLocation(
              type='text', 
              name='dropoffLocation', 
              placeholder='e.g., Roehampton University', 
              required,
              value=formData ? formData.dropoffLocation : 'Roehampton University'
            )
          
          .mb-3
            label.form-label(for='departureDatetime') Departure Date and Time*
            input.form-control#departureDatetime(
              type='datetime-local', 
              name='departureDatetime', 
              required,
              value=formData ? formData.departureDatetime : ''
            )
          
          .mb-3
            label.form-label(for='seatsAvailable') Available Seats*
            input.form-control#seatsAvailable(
              type='number', 
              name='seatsAvailable', 
              min='1', 
              max='8', 
              required,
              value=formData ? formData.seatsAvailable : '2'
            )
          
          .mb-3
            label.form-label(for='category') Ride Category*
            select.form-control#category(name='category', required)
              option(value='Campus Routes', selected=formData && formData.category === 'Campus Routes') Campus Routes
              option(value='Shopping Trips', selected=formData && formData.category === 'Shopping Trips') Shopping Trips
              option(value='Airport Transfers', selected=formData && formData.category === 'Airport Transfers') Airport Transfers
              option(value='Special Events', selected=formData && formData.category === 'Special Events') Special Events
              option(value='Weekend Getaways', selected=formData && formData.category === 'Weekend Getaways') Weekend Getaways
            small.form-text.text-muted Select the category that best describes your ride.
          
          .mb-3
            label.form-label Ride Preferences
            .form-check
              input.form-check-input#quietRide(type='checkbox', name='preferences', value='Quiet Ride', checked=formData && formData.preferences && formData.preferences.includes('Quiet Ride'))
              label.form-check-label(for='quietRide') Quiet Ride
            .form-check
              input.form-check-input#musicAllowed(type='checkbox', name='preferences', value='Music Allowed', checked=formData && formData.preferences && formData.preferences.includes('Music Allowed'))
              label.form-check-label(for='musicAllowed') Music Allowed
            .form-check
              input.form-check-input#petFriendly(type='checkbox', name='preferences', value='Pet Friendly', checked=formData && formData.preferences && formData.preferences.includes('Pet Friendly'))
              label.form-check-label(for='petFriendly') Pet Friendly
            .form-check
              input.form-check-input#smokingAllowed(type='checkbox', name='preferences', value='Smoking Allowed', checked=formData && formData.preferences && formData.preferences.includes('Smoking Allowed'))
              label.form-check-label(for='smokingAllowed') Smoking Allowed
            .form-check
              input.form-check-input#longTermParking(type='checkbox', name='preferences', value='Long-Term Parking Available', checked=formData && formData.preferences && formData.preferences.includes('Long-Term Parking Available'))
              label.form-check-label(for='longTermParking') Long-Term Parking Available
            small.form-text.text-muted Select all that apply to your ride.
          
          .mb-3
            label.form-label(for='tags') Tags (comma separated)
            input.form-control#tags(
              type='text', 
              name='tags', 
              placeholder='e.g., Morning, Putney, Commute', 
              value=formData ? formData.tags : ''
            )
            small.form-text.text-muted Tags help others find your ride - separate multiple tags with commas.
          
          if tags && tags.length > 0
            .mb-3
              label.form-label Popular Tags
              .d-flex.flex-wrap.gap-2
                each tag in tags
                  button.btn.btn-sm.btn-outline-secondary.tag-btn(type='button', data-tag=tag.name) #{tag.name}
          
          .d-grid.gap-2.d-md-flex.justify-content-md-end
            a.btn.btn-secondary.me-md-2(href='/rides') Cancel
            button.btn.btn-primary(type='submit') Offer Ride

block scripts
  script.
    // When document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Set minimum date to today
      const today = new Date();
      const yyyy = today.getFullYear();
      const mm = String(today.getMonth() + 1).padStart(2, '0');
      const dd = String(today.getDate()).padStart(2, '0');
      
      const todayFormatted = `${yyyy}-${mm}-${dd}T00:00`;
      document.getElementById('departureDatetime').min = todayFormatted;
      
      // Add event listeners to tag buttons
      const tagButtons = document.querySelectorAll('.tag-btn');
      const tagsInput = document.getElementById('tags');
      
      tagButtons.forEach(btn => {
        btn.addEventListener('click', function() {
          const tagValue = this.getAttribute('data-tag');
          let currentTags = tagsInput.value.split(',').map(t => t.trim()).filter(t => t !== '');
          
          // Add tag if not already present
          if (!currentTags.includes(tagValue)) {
            currentTags.push(tagValue);
            tagsInput.value = currentTags.join(', ');
          }
        });
      });
      
      // Handle checkbox preferences
      document.querySelector('form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Get all checked preferences
        const preferenceCheckboxes = document.querySelectorAll('input[name="preferences"]:checked');
        const selectedPreferences = Array.from(preferenceCheckboxes).map(cb => cb.value);
        
        // Create a hidden input with combined preferences
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'preferences';
        input.value = selectedPreferences.join(',');
        
        // Replace checkboxes with the hidden input
        preferenceCheckboxes.forEach(cb => cb.removeAttribute('name'));
        this.appendChild(input);
        
        // Submit the form
        this.submit();
      });
    }); 